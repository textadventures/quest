<style scoped>
    .left-pane ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .list-item-button {
        width: 100%;
        text-align: left;
        background: none;
        border: none;
        cursor: pointer;
        padding: 6px 8px;
    }

    .list-item-button:hover {
        background-color: #f0f0f0;
    }

    .list-item-button.selected {
        background-color: #007BFF;
        color: #fff;
    }
</style>

<div class="left-pane">
    <ul>
        @for (var i = 0; i < Items.Count(); i++)
        {
            var index = i;
            var item = Items.ElementAt(i);
            <li>
                <button
                    class="list-item-button @(item == SelectedItem ? "selected" : "")"
                    @onclick="() => ItemSelected(index, item)">
                    @item
                </button>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter] public IEnumerable<string> Items { get; set; } = [];
    [Parameter] public EventCallback<(int, string)> OnItemSelected { get; set; }
    [Parameter] public string? SelectedItem { get; set; }
    
    private void ItemSelected(int index, string item)
    {
        if (item == SelectedItem)
        {
            return;
        }
        SelectedItem = item;
        OnItemSelected.InvokeAsync((index, item));
    }
}