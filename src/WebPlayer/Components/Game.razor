@using QuestViva.Common
@using QuestViva.PlayerCore
@using QuestViva.WebPlayer.Components.Debugger
@rendermode InteractiveServer
@inject GameLauncher GameLauncher

<HeadContent>
    <script type="text/javascript" src="/res/lib/jquery-2.1.1.min.js"></script>
    <script type="text/javascript" src="/res/lib/jquery-ui.min.js"></script>
    <script type="text/javascript" src="/res/lib/jquery.jplayer.min.js"></script>
    <script type="text/javascript" src="/res/lib/jquery.multi-open-accordion-1.5.3.js"></script>
    <link rel="Stylesheet" type="text/css" href="/res/lib/jquery-ui.min.css" />
    <link rel="Stylesheet" type="text/css" href="/res/playercore.css" />
    <script type="text/javascript" src="/res/playercore.js"></script>
    <script type="text/javascript" src="player.js"></script>
    <script type="text/javascript" src="playerweb.js"></script>
    <script>
        function addPaperScript() {
            const gridJs = document.createElement("script");
            gridJs.type = "text/paperscript";
            gridJs.src = "/res/grid.js";
            gridJs.setAttribute("canvas", "gridCanvas");
            document.head.appendChild(gridJs);

            const paperJs = document.createElement("script");
            paperJs.src = "/res/lib/paper.js";
            document.head.appendChild(paperJs);
        }
    </script>
</HeadContent>

@if (gameDebug != null)
{
    <Debugger Game="@gameDebug" OnRunWalkthrough="RunWalkthrough"></Debugger>
}

@UiHtml

@code {
    [Parameter] public required IGameDataProvider GameDataProvider { get; set; }
    private static MarkupString UiHtml => (MarkupString) PlayerHelper.GetUiResourceString("playercore.htm");
    [Inject] private IJSRuntime JS { get; set; } = null!;
    private Player Player { get; set; } = null!;
    private IGameDebug? gameDebug;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        var gameData = await GameDataProvider.GetData();
        var game = GameLauncher.GetGame(gameData);
        
        Player = new Player(game, GameDataProvider.ResourcesId, JS);
        GameResources.AddResourceProvider(GameDataProvider.ResourcesId, Player.GetResource);
        
        await JS.InvokeVoidAsync("WebPlayer.initUI");

        await Player.Initialise();
        
        gameDebug = game as IGameDebug;
        await JS.InvokeVoidAsync("WebPlayer.setCanDebug", gameDebug != null);
        StateHasChanged();
    }

    private async Task RunWalkthrough(string name)
    {
        await Player.RunWalkthrough(name);
    }
}