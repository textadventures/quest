<!--Saved by Quest 5.6.6108.15891-->
<asl version="550">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <dynamictemplate name="ObjectCannotBeStored">"You cannot put " + GetDisplayName(object) + " there."</dynamictemplate>
  <delegate name="textprocessor" parameters="" type="string" />
  <game name="Unit testing">
    <gameid>120a1c08-57db-4210-bdb0-540c78231fc4</gameid>
    <version>1.0</version>
    <firstpublished>2017</firstpublished>
    <defaultforeground>Black</defaultforeground>
    <showpanes type="boolean">false</showpanes>
    <testcount type="int">0</testcount>
    <testfailures type="stringlist" />
    <defaultfont>'Courier New', Courier, monospace</defaultfont>
    <feature_annotations />
    <feature_advancedwearables />
    <attr name="autodescription_youarein" type="int">0</attr>
    <attr name="autodescription_youcansee" type="int">0</attr>
    <attr name="autodescription_youcango" type="int">0</attr>
    <attr name="autodescription_description" type="int">0</attr>
    <showcommandbar type="boolean">false</showcommandbar>
    <showlocation type="boolean">false</showlocation>
    <showborder type="boolean">false</showborder>
    <gridmap type="boolean">false</gridmap>
    <classiclocation />
    <attr name="feature_pictureframe" type="boolean">false</attr>
    <shadowbox />
    <roomenter type="script">
    </roomenter>
    <start type="script"><![CDATA[
      player.changedparent => {
      }
      Testing ("FormatList and IndexOf")
      list = Split("one;two;three", ";")
      Assert ("one, two or three", FormatList(list, ",", "or", "nothing"))
      Assert ("one; two; and three", FormatList(list, ";", "; and", "nothing"))
      Assert (0, IndexOf(list, "one"))
      Assert (-1, IndexOf(list, "zero"))
      list = NewStringList()
      Assert ("nothing", FormatList(list, ",", "and", "nothing"))
      Assert (-1, IndexOf(list, "one"))
      //
      Testing ("FormatList with objects")
      list = NewObjectList()
      Assert ("nothing", FormatList(list, ",", "or", "nothing"))
      list add (list, overalls)
      Assert ("overalls", FormatList(list, ",", "or", "nothing"))
      list add (list, coat)
      Assert ("overalls or an overcoat", FormatList(list, ",", "or", "nothing"))
      list add (list, tiger)
      Assert ("overalls, an overcoat and a tiger", FormatList(list, ",", "and", "nothing"))
      Assert ("overalls, an overcoat, and a tiger", FormatList(list, ",", ", and", "nothing"))
      //
      // -------------------------------------------------------------------------
      Testing ("ToWords and ToRoman")
      Assert ("fourteen", ToWords(14))
      Assert ("one hundred and forty", ToWords(140))
      Assert ("fourteen hundred and nine", ToWords(1409))
      Assert ("minus fourteen", ToWords(-14))
      Assert ("1400000", ToWords(1400000))
      Assert ("XIV", ToRoman(14))
      Assert ("", ToRoman(0))
      Assert ("CXL", ToRoman(140))
      Assert ("MCDIX", ToRoman(1409))
      //
      // -------------------------------------------------------------------------
      Testing ("Spaces")
      Assert ("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", Spaces(5))
      Assert ("", Spaces(-1))
      //
      // -------------------------------------------------------------------------
      Testing ("ScopeUnlockedExitsForRoom")
      Assert (2, ListCount(ScopeUnlockedExitsForRoom(room)))
      exitsecond.locked = true
      Assert (1, ListCount(ScopeUnlockedExitsForRoom(room)))
      exitthird.visible = false
      Assert (0, ListCount(ScopeUnlockedExitsForRoom(room)))
      exitsecond.locked = false
      exitthird.visible = true
      //
      // -------------------------------------------------------------------------
      Testing ("CloneObjectAndMoveHere")
      cl = CloneObjectAndMoveHere (tiger)
      Assert (room, cl.parent)
      Assert ("tiger", cl.alias)
      //
      // -------------------------------------------------------------------------
      Testing ("DiceRoll")
      for (i, 1, 20) {
        AssertInRange (1, 3, "DiceRoll(\"1d3\")")
        AssertInRange (1, 3, "DiceRoll(\"d3\")")
        AssertInRange (6, 10, "DiceRoll(\"2d3+4\")")
        AssertInRange (5, 7, "DiceRoll(\"d3+4\")")
        AssertInRange (-2, 2, "DiceRoll(\"2d3-4\")")
        AssertInRange (-3, -1, "DiceRoll(\"d3-4\")")
      }
      Assert (3, DiceRoll(3))
      Assert (3, DiceRoll("3"))
      Assert (3, DiceRoll("+3"))
      Assert (-2, DiceRoll("-2"))
      //
      // -------------------------------------------------------------------------
      Testing ("PickOne...")
      Assert ("", PickOneString(NewStringList()))
      list = Split("one;two;three", ";")
      for (i, 1, 20) {
        AssertIn (list, PickOneString(list))
      }
      for (i, 1, 20) {
        AssertIn (list, PickOneString("one;two;three"))
      }
      ol = NewObjectList()
      Assert (null, PickOneObject(ol))
      list add (ol, hat)
      list add (ol, teapot)
      for (i, 1, 20) {
        AssertIn (ol, PickOneChildOfType(third, "specialtype"))
      }
      list add (ol, tiger)
      for (i, 1, 20) {
        AssertIn (ol, PickOneObject(ol))
      }
      for (i, 1, 20) {
        AssertIn (ol, PickOneChild(third))
      }
      ol = NewObjectList()
      list add (ol, exitsecond)
      list add (ol, exitthird)
      for (i, 1, 20) {
        AssertIn (ol, PickOneExit(room))
      }
      for (i, 1, 20) {
        AssertIn (ol, PickOneUnlockedExit(room))
      }
      exitsecond.locked = true
      list remove (ol, exitsecond)
      for (i, 1, 20) {
        AssertIn (ol, PickOneUnlockedExit(room))
      }
      //
      // -------------------------------------------------------------------------
      Testing ("Drop options")
      player.parent = third
      droppable object.parent = player
      AssertCommand ("drop droppable", "You drop it.")
      Assert (third, droppable object.parent)
      player.parent = fourth
      droppable object.parent = player
      AssertCommand ("drop droppable", "You drop it.")
      Assert (third, droppable object.parent)
      undroppable object.parent = player
      AssertCommand ("drop undroppable", "You can't drop it.")
      AssertCommand ("put undroppable in backpack", "You cannot put an undroppable object there.")
      Assert (player, undroppable object.parent)
      script drop object.parent = player
      AssertCommand ("drop script", "you are trying to drop this object to a third")
      AssertCommand ("put script in backpack", "you are trying to drop this object to a backpack")
      Assert (player, script drop object.parent)
      player.parent = room
      //
      // -------------------------------------------------------------------------
      Testing ("me and alias")
      AssertCommand ("x me", "Looking good.")
      AssertCommand ("look boris", "Looking good.")
      //
      // -------------------------------------------------------------------------
      Testing ("SecondaryScopeReachableForRoom")
      Assert (6, Listcount(ScopeReachableNotHeldForRoom (third)))
      //
      //
      //
      // -------------------------------------------------------------------------
      Testing ("Clothing - baseline")
      SetVerbs
      Assert (2, player.bonus1)
      Assert (4, player.bonus2)
      Assert (0, GetArmour())
      Assert ("nothing", FormatList(ListWornFor(player), ",", "and", "nothing"))
      Assert ("nothing", ListClothes())
      Assert (0, WornCount())
      //
      Testing ("Clothing - Putting things on")
      Assert ("Look at;Drop;Wear", Join(overalls.inventoryverbs, ";"))
      WearGarment (overalls)
      Assert (1, WornCount())
      Assert ("Look at;Remove", Join(overalls.inventoryverbs, ";"))
      WearGarment (coat)
      Assert (2, WornCount())
      Assert ("Look at", Join(overalls.inventoryverbs, ";"))
      Assert ("overalls (worn)", overalls.alias)
      Assert ("overcoat (worn)", coat.alias)
      Assert (3, player.bonus1)
      Assert (2, player.bonus2)
      Assert (coat, GetOuter("torso"))
      Assert (overalls, GetOuter("legs"))
      Assert (null, GetOuter("head"))
      OutputTextRawNoBr ("@1")
      Assert ("an overcoat (worn) and overalls (worn)", FormatList(ListWornFor(player), ",", "and", "nothing"))
      Assert ("an overcoat and overalls", ListClothes())
      Assert (24, GetArmour())
      Assert (8, _GetSlotArmour(player, "torso"))
      //
      Testing ("Clothing - Removing items")
      RemoveGarment (coat)
      Assert ("Look at;Remove", Join(overalls.inventoryverbs, ";"))
      RemoveGarment (overalls)
      Assert ("Look at;Drop;Wear", Join(overalls.inventoryverbs, ";"))
      Assert (2, player.bonus1)
      OutputTextRawNoBr ("@2")
      Assert (4, player.bonus2)
      Assert ("overalls", overalls.alias)
      OutputTextRawNoBr ("@3")
      Assert ("overcoat", coat.alias)
      Assert (0, GetArmour())
      OutputTextRawNoBr ("@4")
      //
      Testing ("Clothing - NPCs")
      Assert (null, GetOuterFor(mary, "torso"))
      underwear.worn = true
      Assert ("underwear", FormatList(ListWornFor(mary), ",", "and", "nothing"))
      Assert (underwear, GetOuterFor(mary, "torso"))
      dress.worn = true
      Assert ("a dress and underwear", FormatList(ListWornFor(mary), ",", "and", "nothing"))
      Assert ("a dress", FormatList(ListVisibleFor(mary), ",", "and", "nothing"))
      Assert (dress, GetOuterFor(mary, "legs"))
      Assert (null, GetOuterFor(mary, "head"))
      //
      Testing ("Clothing - commands")
      AssertCommand ("wear overcoat", "You put it on.")
      AssertCommand ("put overcoat on", "You are already wearing it.")
      AssertCommand ("put on overalls", "You cannot wear that over an overcoat.")
      AssertCommand ("doff overcoat", "You take it off.")
      AssertCommand ("don overalls", "You put them on.")
      AssertCommand ("wear overcoat", "You put it on.")
      AssertCommand ("take overalls off", "You can't remove that while wearing an overcoat.")
      AssertCommand ("take overcoat off", "You take it off.")
      AssertCommand ("take off overalls", "You take them off.")
      //
      Testing ("Clothing - commands 2")
      player.parent = fifth
      AssertCommand ("get shoes", "You pick them up.")
      Assert ("Look at;Drop;Wear", Join(shoes.inventoryverbs, ";"))
      AssertCommand ("don shoes", "You put them on.")
      Assert ("Look at;Remove", Join(shoes.inventoryverbs, ";"))
      AssertCommand ("get socks", "You pick them up.")
      Assert ("Look at;Drop", Join(socks.inventoryverbs, ";"))
      //
      Testing ("Clothing - multistate")
      AssertCommand ("get jacket", "You pick it up.")
      Assert ("Look at;Drop;Wear", Join(casual jacket.inventoryverbs, ";"))
      Assert (2, player.cool)
      Assert (3, player.warm)
      Assert ("a casual jacket", GetDisplayName(casual jacket))
      AssertCommand ("don jacket", "You put it on.")
      Assert ("Look at;Remove;Fasten", Join(casual jacket.inventoryverbs, ";"))
      Assert (3, player.cool)
      Assert (3, player.warm)
      Assert ("a casual jacket (worn unfastened)", GetDisplayName(casual jacket))
      AssertCommand ("fasten jacket", "You button up the jacket.")
      Assert ("Look at;Remove;Fasten;Unfasten", Join(casual jacket.inventoryverbs, ";"))
      Assert (2, player.cool)
      Assert (3, player.warm)
      Assert ("a casual jacket (worn half-buttoned)", GetDisplayName(casual jacket))
      AssertCommand ("fasten jacket", "You button up the jacket.")
      Assert ("Look at;Remove;Unfasten", Join(casual jacket.inventoryverbs, ";"))
      Assert (1, player.cool)
      Assert (5, player.warm)
      Assert ("a casual jacket (worn)", GetDisplayName(casual jacket))
      AssertCommand ("fasten jacket", "It already is.")
      Assert ("Look at;Remove;Unfasten", Join(casual jacket.inventoryverbs, ";"))
      Assert (1, player.cool)
      Assert (5, player.warm)
      Assert ("a casual jacket (worn)", GetDisplayName(casual jacket))
      AssertCommand ("unfasten jacket", "You unfasten it.")
      Assert ("Look at;Remove;Fasten;Unfasten", Join(casual jacket.inventoryverbs, ";"))
      Assert (2, player.cool)
      Assert (3, player.warm)
      Assert ("a casual jacket (worn half-buttoned)", GetDisplayName(casual jacket))
      AssertCommand ("unfasten jacket", "You unfasten it.")
      Assert ("Look at;Remove;Fasten", Join(casual jacket.inventoryverbs, ";"))
      Assert (3, player.cool)
      Assert (3, player.warm)
      Assert ("a casual jacket (worn unfastened)", GetDisplayName(casual jacket))
      AssertCommand ("unfasten jacket", "It already is.")
      Assert ("Look at;Remove;Fasten", Join(casual jacket.inventoryverbs, ";"))
      Assert (3, player.cool)
      Assert (3, player.warm)
      Assert ("a casual jacket (worn unfastened)", GetDisplayName(casual jacket))
      //
      //
      //
      // -------------------------------------------------------------------------
      player.parent = room
      Testing ("Text processor: colours")
      Assert ("This is in <span style=\"color:red;\">red</span>", ProcessText("This is in {colour:red:red}"))
      Assert ("This is in <span style=\"color:red;\">red</span>", ProcessText("This is in {color:red:red}"))
      Assert ("This is in <span style=\"background-color:red;\">red</span>", ProcessText("This is in {back:red:red}"))
      //
      // -------------------------------------------------------------------------
      Testing ("Text processor: text style")
      Assert ("This is in <i>italic</i>", ProcessText("This is in {i:italic}"))
      Assert ("This is in <b>bold</b>", ProcessText("This is in {b:bold}"))
      Assert ("This is in <u>underline</u>", ProcessText("This is in {u:underline}"))
      Assert ("This is in <s>stringthrough</s>", ProcessText("This is in {s:stringthrough}"))
      Assert ("This is in {n:nothing}", ProcessText("This is in {n:nothing}"))
      //
      // -------------------------------------------------------------------------
      Testing ("Text processor: either")
      player.count = 5
      player.flag = true
      Assert ("1 You don't have enough", ProcessText("1 You {either player.count < 10:don't }have enough"))
      Assert ("2 You have enough", ProcessText("2 You {either player.count<3:don't }have enough"))
      Assert ("3 You don't have enough", ProcessText("3 You {either player.flag:don't }have enough"))
      Assert ("4 You have enough", ProcessText("4 You {either not player.flag:don't }have enough"))
      player.flag = false
      Assert ("5 You have enough", ProcessText("5 You {either player.flag:don't }have enough"))
      Assert ("6 You don't have enough", ProcessText("6 You {either not player.flag:don't }have enough"))
      Assert ("7 You have more than 4", ProcessText("7 You have {either player.count > 4:more than 4:less than 5}"))
      Assert ("8 You have less than 6", ProcessText("8 You have {either player.count > 5:more than 5:less than 6}"))
      Assert ("You are the player", ProcessText("You {either StartsWith(player.name, \"play\"):are the player}"))
      Assert ("You are the player", ProcessText("You {either StartsWith(player.name, \"play\") and not player.flag:are the player}"))
      Assert ("You are the player", ProcessText("You {if player.alias=Boris:are the player}"))
      Assert ("You are the player", ProcessText("You {if player.alias<>you:are the player}"))
      //
      // -------------------------------------------------------------------------
      Testing ("Text processor: eval")
      Assert ("player.count = 5", ProcessText("player.count = {=player.count}"))
      Assert ("You are in the room", ProcessText("You are in the {=player.parent.name}"))
      Assert ("You are in the Room", ProcessText("You are in the {=CapFirst(player.parent.name)}"))
      Assert ("player.count = 5", ProcessText("player.count = {eval:player.count}"))
      Assert ("You are in the room", ProcessText("You are in the {eval:player.parent.name}"))
      Assert ("You are in the Room", ProcessText("You are in the {eval:CapFirst(player.parent.name)}"))
      Assert ("This is from test", ProcessText("This is {=Test}"))
      //
      // -------------------------------------------------------------------------
      Testing ("Text processor: here/nothere")
      Assert ("You can see the player", ProcessText("You can see {here player:the player}"))
      Assert ("You can not see the tiger", ProcessText("You can not see {nothere tiger:the tiger}"))
      Assert ("You can see ", ProcessText("You can see {nothere player:the player}"))
      Assert ("You can not see ", ProcessText("You can not see {here tiger:the tiger}"))
      //
      // -------------------------------------------------------------------------
      Testing ("Text processor: curly brace")
      Assert ("player.count = {player.count}", ProcessText("player.count = @@@open@@@player.count@@@close@@@"))
      Assert ("player.count = {}", ProcessText("player.count = @@@open@@@@@@close@@@"))
      //
      // -------------------------------------------------------------------------
      Testing ("Text processor: failing text")
      Assert ("1 You don't have enough", ProcessText("1 You {if player.count<10:don't }have enough"))
      Assert ("2 You {if player2.count<10:don't }have enough", ProcessText("2 You {if player2.count<10:don't }have enough"))
      //
      // -------------------------------------------------------------------------
      Testing ("Text processor: old error handling")
      Assert ("player.count = {unknown.count}", ProcessText("player.count = {unknown.count}"))
      Results
    ]]></start>
  </game>
  <object name="room">
    <inherit name="editor_room" />
    <attr name="implementation_notes">This is just a test of new features for Quest 5.7</attr>
    <usedefaultprefix />
    <customtp type="script">
      msg ("here1")
      msg ("section=" + section)
      game.textprocessorresult = "@" + section + "@"
      msg ("here2")
      msg ("game.textprocessorresult=" + game.textprocessorresult)
    </customtp>
    <object name="player">
      <inherit name="editor_object" />
      <inherit name="editor_player" />
      <bonus1 type="int">2</bonus1>
      <bonus2 type="int">4</bonus2>
      <attr name="pov_alias">Boris</attr>
      <cool type="int">2</cool>
      <warm type="int">3</warm>
      <object name="backpack">
        <inherit name="editor_object" />
        <inherit name="container_open" />
        <feature_container />
      </object>
      <object name="coat">
        <inherit name="editor_object" />
        <inherit name="wearable" />
        <feature_wearable />
        <attr name="wear_layer" type="int">3</attr>
        <wear_slots type="stringlist">
          <value>torso</value>
        </wear_slots>
        <armour type="int">4</armour>
        <bonusatts>bonus1;bonus2-2</bonusatts>
        <alias>overcoat</alias>
      </object>
      <object name="overalls">
        <inherit name="editor_object" />
        <inherit name="wearable" />
        <inherit name="plural" />
        <feature_wearable />
        <wear_slots type="stringlist">
          <value>torso</value>
          <value>legs</value>
        </wear_slots>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
      </object>
    </object>
    <exit name="exitsecond" alias="southeast" to="second">
      <inherit name="southeastdirection" />
    </exit>
    <exit name="exitthird" alias="southwest" to="third">
      <inherit name="southwestdirection" />
    </exit>
    <object name="door">
      <inherit name="editor_object" />
      <unlock type="string"></unlock>
    </object>
  </object>
  <object name="second">
    <inherit name="editor_room" />
    <exit alias="northwest" to="room">
      <inherit name="northwestdirection" />
    </exit>
    <object name="mary">
      <inherit name="editor_object" />
      <object name="dress">
        <inherit name="editor_object" />
        <inherit name="wearable" />
        <feature_wearable />
        <wear_slots type="stringlist">
          <value>legs</value>
          <value>torso</value>
        </wear_slots>
        <display>dress</display>
        <take />
      </object>
      <object name="underwear">
        <inherit name="editor_object" />
        <inherit name="wearable" />
        <worn type="boolean">false</worn>
        <feature_wearable />
        <attr name="wear_layer" type="int">1</attr>
        <wear_slots type="stringlist">
          <value>torso</value>
        </wear_slots>
        <display>underwear</display>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
      </object>
    </object>
  </object>
  <object name="third">
    <inherit name="editor_room" />
    <exit alias="northeast" to="room">
      <inherit name="northeastdirection" />
    </exit>
    <object name="hat">
      <inherit name="editor_object" />
      <inherit name="specialtype" />
      <inherit name="wearable" />
      <feature_wearable />
      <multistate />
    </object>
    <object name="teapot">
      <inherit name="editor_object" />
      <inherit name="specialtype" />
      <inherit name="container_closed" />
      <inherit name="container_lockable" />
      <take />
      <drop type="boolean">false</drop>
      <feature_container />
      <transparent />
    </object>
    <object name="tiger">
      <inherit name="editor_object" />
    </object>
    <exit alias="west" to="fourth">
      <inherit name="westdirection" />
      <runscript type="boolean">false</runscript>
      <message>You sneak down the dark passage...</message>
    </exit>
  </object>
  <object name="fourth">
    <inherit name="editor_room" />
    <dropdestination type="object">third</dropdestination>
    <object name="droppable object">
      <inherit name="editor_object" />
      <take />
    </object>
    <object name="undroppable object">
      <inherit name="editor_object" />
      <take />
      <drop type="boolean">false</drop>
    </object>
    <object name="script drop object">
      <inherit name="editor_object" />
      <take />
      <drop type="script">
        msg ("you are trying to drop this object to " + GetDisplayName(destination))
      </drop>
    </object>
    <exit alias="east" to="third">
      <inherit name="eastdirection" />
    </exit>
  </object>
  <object name="backdrop">
    <inherit name="editor_room" />
    <object name="wall">
      <inherit name="editor_object" />
    </object>
    <object name="sky">
      <inherit name="editor_object" />
    </object>
  </object>
  <object name="fifth">
    <inherit name="editor_room" />
    <object name="socks">
      <inherit name="editor_object" />
      <inherit name="wearable" />
      <inherit name="plural" />
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <feature_wearable />
      <wear_slots type="stringlist">
        <value>feet</value>
      </wear_slots>
      <attr name="wear_layer" type="int">1</attr>
    </object>
    <object name="shoes">
      <inherit name="editor_object" />
      <inherit name="wearable" />
      <inherit name="plural" />
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <feature_wearable />
      <wear_slots type="stringlist">
        <value>feet</value>
      </wear_slots>
    </object>
    <object name="casual jacket">
      <inherit name="editor_object" />
      <inherit name="wearable" />
      <feature_wearable />
      <attr name="wear_layer" type="int">3</attr>
      <wear_slots type="stringlist">
        <value>torso</value>
      </wear_slots>
      <multistate />
      <multistate_descriptors type="stringlist">
        <value>unfastened</value>
        <value>half-buttoned</value>
        <value>*</value>
      </multistate_descriptors>
      <multistate_wearslots type="stringlist">
        <value>torso;navel</value>
        <value>torso</value>
        <value>torso</value>
      </multistate_wearslots>
      <multistate_verbs type="stringlist">
        <value>Fasten</value>
        <value>Fasten;Unfasten</value>
        <value>Unfasten</value>
      </multistate_verbs>
      <multistate_bonusatts type="stringlist">
        <value>cool</value>
        <value>*</value>
        <value>warm+2;cool-1</value>
      </multistate_bonusatts>
      <fasten type="script">
        if (not this.worn) {
          msg ("You're not wearing it.")
        }
        else if (this.multistate_status = 3) {
          msg ("It already is.")
        }
        else {
          msg ("You button up the jacket.")
          SetMultistate (this, this.multistate_status + 1)
        }
      </fasten>
      <unfasten type="script">
        if (not this.worn) {
          msg ("You're not wearing it.")
        }
        else if (this.multistate_status = 1) {
          msg ("It already is.")
        }
        else {
          msg ("You unfasten it.")
          SetMultistate (this, this.multistate_status - 1)
        }
      </unfasten>
    </object>
  </object>
  <verb>
    <property>fasten</property>
    <pattern>fasten</pattern>
    <defaultexpression>"You can't fasten " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>unfasten</property>
    <pattern>unfasten</pattern>
    <defaultexpression>"You can't unfasten " + object.article + "."</defaultexpression>
  </verb>
  <type name="specialtype" />
  <function name="SecondaryScopeReachableForRoom" parameters="room" type="objectlist">
    return (GetDirectChildren(backdrop))
  </function>
  <function name="OutputText" parameters="text">
    game.lastoutputtext = ProcessText(text)
    if (not GetBoolean(game, "hideoutput")) {
      OutputTextRaw (game.lastoutputtext)
    }
  </function>
  <function name="Assert" parameters="expected, actual"><![CDATA[
    if (not TypeOf(expected) = TypeOf(actual)) {
      Result (">" + actual + "< (" + TypeOf(actual) + ") was expected to be >" + expected + "< (" + TypeOf(expected) + ")")
    }
    else if (not expected = actual) {
      Result (">" + actual + "< was expected to be >" + expected + "<")
    }
    else {
      Result (null)
    }
  ]]></function>
  <function name="AssertIn" parameters="list, actual"><![CDATA[
    if (not ListContains(list, actual)) {
      Result (">" + actual + "< expected to be in " + list)
    }
    else {
      Result (null)
    }
  ]]></function>
  <function name="AssertInRange" parameters="from, to, code"><![CDATA[
    actual = eval(code)
    if (actual < from or actual > to) {
      Result (">" + actual + "< expected to be in range " + to + " to " + from + ": " + code)
    }
    else {
      Result (null)
    }
  ]]></function>
  <function name="Result" parameters="message"><![CDATA[
    if (message = null) {
      JS.addText (".")
    }
    else {
      JS.addText ("F")
      list add (game.testfailures, "Error in " + game.testingtitle + ": " + message)
    }
    game.testcount = game.testcount + 1
    if (game.testcount = 50) {
      JS.addText ("<br/>")
      game.testcount = 0
    }
  ]]></function>
  <function name="Results">
    game.testingdone = true
    msg (" ")
    msg (" ")
    if (ListCount(game.testfailures) = 0) {
      msg ("No failures!")
    }
    else {
      msg (ListCount(game.testfailures) + " failure(s):")
      foreach (s, game.testfailures) {
        OutputTextRaw (s)
      }
    }
    msg (" ")
    msg (" ")
    finish
  </function>
  <function name="Test" type="string">
    return ("from test")
  </function>
  <function name="Testing" parameters="s">
    game.testingtitle = s
  </function>
  <function name="AssertOutput" parameters="s">
    Assert (s, game.lastoutputtext)
  </function>
  <function name="AssertCommand" parameters="com, s">
    game.hideoutput = true
    HandleSingleCommand (com)
    game.hideoutput = false
    Assert (s, game.lastoutputtext)
  </function>
</asl>