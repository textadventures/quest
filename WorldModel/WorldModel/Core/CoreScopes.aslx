<library>
  <function name="GetPlacesObjectsList" type="objectlist">
    return (ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov))
  </function>

  <function name="GetExitsList" type="objectlist">
    return (RemoveLookOnlyExits(RemoveSceneryObjects(ScopeExits())))
  </function>

  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsVisible(game.pov, obj)) {
        list add(result, obj)
      }
    }
    return (result)
  </function>

  <function name="ScopeReachableInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsReachable(game.pov, obj)) {
        list add(result, obj)
      }
    }
    return (result)
  </function>
  
  <function name="ScopeVisibleNotHeld" type="objectlist">
    return (ScopeVisibleNotHeldForRoom(game.pov.parent))
  </function>
  
  <function name="ScopeVisibleNotHeldForRoom" type="objectlist" parameters="room">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room))
      list add (result, game.pov)
      return (result)
    } else {
      return (ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room)))
    }
  </function>
  
  <function name="ScopeVisibleNotHeldNotScenery" type="objectlist">
    return (ScopeVisibleNotHeldNotSceneryForRoom(game.pov.parent))
  </function>
  
  <function name="ScopeVisibleNotHeldNotSceneryForRoom" type="objectlist" parameters="room">
    return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)))
  </function>
  
  <function name="ScopeReachable" type="objectlist">
    return (ScopeReachableForRoom(game.pov.parent))
  </function>

  <function name="ScopeReachableForRoom" type="objectlist" parameters="room">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeReachableInventory())
      list add(result, game.pov)
    } else {
      result = ScopeReachableNotHeldForRoom(room)
    }  
    return (result)
  </function>
  
  <function name="ScopeVisibleNotReachable" type="objectlist">
    return (ScopeVisibleNotReachableForRoom(game.pov.parent))
  </function>
  
  <function name="ScopeVisibleNotReachableForRoom" type="objectlist" parameters="room">
    result = NewObjectList()
    exclude = ScopeReachableForRoom(room)
    list add(exclude, game.pov)
    newParent = GetNonTransparentParent(room)
    foreach (obj, GetAllChildObjects(newParent)) {
      if (ContainsVisible(newParent, obj) and not ListContains(exclude, obj)) {
        list add(result, obj)
      }
    }    
    return (result)
  </function>
  
  <function name="GetNonTransparentParent" type="object" parameters="room">
    if (GetBoolean(room, "transparent")) {
      if (room.parent = null) {
        return (room)
      }
      else {
        return (GetNonTransparentParent(room.parent))
      }
    }
    else {
      return (room)
    }
  </function>

  <function name="ScopeReachableNotHeld" type="objectlist">    
    return (ScopeReachableNotHeldForRoom(game.pov.parent))
  </function>

  <function name="ScopeVisibleLightsource" type="objectlist" parameters="lightstrength">    
    result = ScopeVisible()
    lightobjects = NewObjectList()
    foreach (obj, result) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add(lightobjects, obj)
      }
    }
    exits = ScopeExits()
    foreach (obj, exits) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add(lightobjects, obj)
      }
    }
  
    return (lightobjects)
  </function>
  
  <function name="ScopeReachableNotHeldForRoom" type="objectlist" parameters="room">    
  <![CDATA[
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(room)) {
      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {
        list add(result, obj)
      }
    }
    if (HasScript(game, "scopebackdrop")) {
      dict = NewDictionary()
      dictionary add (dict, "items", result)
      do (game, "scopebackdrop", dict)
    }
    return (result)
  ]]>
  </function>

  <function name="ScopeVisible" type="objectlist">
    return (ScopeVisibleForRoom(game.pov.parent))
  </function>
  
  <function name="ScopeVisibleForRoom" type="objectlist" parameters="room">
    if (room = game.pov.parent) {
      return (ListCombine(ScopeVisibleNotHeldForRoom(room), ScopeInventory()))
    } else {
      return (ScopeVisibleNotHeldForRoom(room))
    }  
  </function>

  <function name="ScopeExits" type="objectlist">
    return (ScopeExitsForRoom(game.pov.parent))
  </function>
  
  <function name="ScopeExitsForRoom" type="objectlist" parameters="room">
    <![CDATA[
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        if (exit.visible) {
          if (GetBoolean(room, "darklevel")) {
            if (GetBoolean(exit, "lightsource")) {
              list add(result, exit)
            }
          }
          else {
            list add(result, exit)
          }
        }
      }
    }
    return (result)
    ]]>
  </function>
  
  <function name="ScopeUnlockedExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        if (exit.visible and not exit.locked) {
          if (GetBoolean(room, "darklevel")) {
            if (GetBoolean(exit, "lightsource")) {
              list add (result, exit)
            }
          }
          else {
            list add (result, exit)
          }
        }
      }
    }
    return (result)
  </function>  
  
  <function name="ScopeCommands" type="objectlist">
    result = NewObjectList()
    foreach (command, AllCommands()) {
      if (command.parent = null or command.parent = game.pov.parent) {
        list add (result, command)
      }
      if (not game.pov.parent.parent = null) {
        if (command.parent = game.pov.parent.parent) {
          list add (result, command)
        }
      }
    }
    return (result)    
  </function>

  <function name="GetBlockingObject" type="object" parameters="obj">
    result = null
    foreach (obj, ListParents(obj)) {
      if (result = null and not CanReachThrough(obj)) {
        result = obj
      }
    }
    return (result)
  </function>

  <function name="ListParents" type="objectlist" parameters="obj">
    <![CDATA[
    result = NewObjectList()
    if (obj.parent <> null) {
      parent_as_list = NewObjectList()
      list add (parent_as_list, obj.parent)
      result = ListCombine(parent_as_list, ListParents(obj.parent))
    }
    return (result)
    ]]>
  </function>
  
  <function name="ContainsVisible" type="boolean" parameters="parentObj, searchObj">
    return (ContainsAccessible(parentObj, searchObj, false))
  </function>

  <function name="ContainsReachable" type="boolean" parameters="parentObj, searchObj">
    return (ContainsAccessible(parentObj, searchObj, true))
  </function>

  <function name="ContainsAccessible" type="boolean" parameters="parentObj, searchObj, onlyReachable">
    if (not HasObject(searchObj, "parent")) {
      return (false)
    }
    else if (not searchObj.visible) {
      return (false)
    }
    else if (GetBoolean(parentObj, "darklevel") and not GetBoolean(searchObj, "lightsource")) {
      return (false)
    }
    else {
      if (searchObj.parent = null) {
        return (false)
      }
      else if (searchObj.parent = parentObj) {
        return (true)
      } else {
        if (onlyReachable) {
          canAdd = CanReachThrough(searchObj.parent)
        }
        else {
          canAdd = CanSeeThrough(searchObj.parent)
        }
        
        if (canAdd) {
          return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable))
        } else {
          return (false)
        }
      }
    }
  </function>

  <function name="GetVolume" type="int" parameters="obj, allinclusive">
    result = 0
    foreach (object, GetAllChildObjects ( obj )) {
      if (HasInt(object, "volume")) {
        result = result + object.volume
      }
    }
    if (allinclusive and HasInt(obj, "volume")) {
      result = result + obj.volume
    }
    return (result)
  </function>
  
  
  <function name="CanSeeThrough" type="boolean" parameters="obj">
    return ((GetBoolean(obj, "transparent") or CanReachThrough(obj)) and not GetBoolean(obj, "hidechildren"))
  </function>

  <function name="CanReachThrough" type="boolean" parameters="obj">
    return (GetBoolean(obj, "isopen") and not GetBoolean(obj, "hidechildren"))
  </function>

  <function name="Got" type="boolean" parameters="obj">
    return (ListContains(ScopeInventory(), obj))
  </function>

  <function name="UpdateObjectLinks">
    if (game.enablehyperlinks) {
      data = NewStringDictionary()
      foreach (object, ScopeVisible()) {
        dictionary add (data, object.name, Join(GetDisplayVerbs(object), "/"))
      }
      JS.updateObjectLinks(data)
      exits = NewStringList()
      foreach (exit, ScopeExits()) {
        list add (exits, exit.name)
      }
      JS.updateExitLinks(exits)
      commands = NewStringList()
      foreach (cmd, ScopeCommands()) {
        list add (commands, cmd.name)
      }
      JS.updateCommandLinks(commands)
    }
  </function>
  
  <!-- To be overriden by authors to do something useful -->
  <function name="SecondaryScopeReachableForRoom" parameters="room" type="objectlist">
    return (NewObjectList())
  </function>
</library>