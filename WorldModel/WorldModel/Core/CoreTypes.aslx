<library>
  <type name="defaultgame">
    <enablehyperlinks/>
    <echocommand/>
    <echohyperlinks/>
    <showdescriptiononenter/>
    <autodescription/>
    <defaultfont>Georgia, serif</defaultfont>
    <defaultfontsize type="int">12</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <backgroundimage type="string"></backgroundimage>
    <setbackgroundopacity type="boolean">false</setbackgroundopacity>
    <backgroundopacity type="double">0.5</backgroundopacity>
    <menufont>Arial</menufont>
    <menufontsize type="int">9</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <underlinehyperlinks/>
    <compassdirections type="simplestringlist">[CompassNW];[CompassN];[CompassNE];[CompassW];[CompassE];[CompassSW];[CompassS];[CompassSE];[CompassUp];[CompassDown];[CompassIn];[CompassOut]</compassdirections>
    <clearframe type="boolean">true</clearframe>
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="simplestringlist">[AllObjects]</allobjects>
    <parserignoreprefixes type="simplestringlist">[ParserIgnorePrefixes]</parserignoreprefixes>
    <displayroomdescriptiononstart type="boolean">true</displayroomdescriptiononstart>
    <showpanes/>
    <showcommandbar/>
    <showlocation/>
    
    <statusandcompassattop type="boolean">false</statusandcompassattop>
    <turnoffcompass type="boolean">false</turnoffcompass>
    <turnoffinventory type="boolean">false</turnoffinventory>
    <turnoffplacesandobjects type="boolean">false</turnoffplacesandobjects>
    <borderlesscursor type="boolean">false</borderlesscursor>
    <colourblend type="boolean">false</colourblend>
    <commandpane type="boolean">false</commandpane>
    <customstatuspane type="boolean">false</customstatuspane>
    <panestheme>Classic</panestheme>
    <shadowbox type="boolean">false</shadowbox>
    <commandcursor>&gt;</commandcursor>
    <moneyformat>$!</moneyformat>
    <classiclocation/>
    <turnoffsavebutton type="boolean">false</turnoffsavebutton>
    <mapexitwidth type="int">1</mapexitwidth>
    <mapexitcolour>Black</mapexitcolour>
    
    <setcustomwidth type="boolean">false</setcustomwidth>
    <customwidth type="int">950</customwidth>
    <setcustompadding type="boolean">false</setcustompadding>
    <custompaddingtop type="int">30</custompaddingtop>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">20</custompaddingleft>
    <custompaddingright type="int">20</custompaddingright>
    <showborder/>
    <showscore type="boolean">false</showscore>
    <showhealth type="boolean">false</showhealth>
    <showmoney type="boolean">false</showmoney>
    <showtitle/>
    <autodisplayverbs/>
    <clearscreenonroomenter type="boolean">false</clearscreenonroomenter>
    <autodescription_youarein type="int">1</autodescription_youarein>
    <autodescription_youcansee type="int">2</autodescription_youcansee>
    <autodescription_youcango type="int">3</autodescription_youcango>
    <autodescription_description type="int">4</autodescription_description>
    <autodescription_youarein_useprefix/>
    <autodescription_youarein_newline type="boolean">false</autodescription_youarein_newline>
    <autodescription_youcansee_newline type="boolean">false</autodescription_youcansee_newline>
    <autodescription_youcango_newline type="boolean">false</autodescription_youcango_newline>
    <autodescription_description_newline type="boolean">false</autodescription_description_newline>
    <changeroom_newline/>
    <command_newline type="boolean">false</command_newline>
    <description type="string"></description>
    <languageid>[LanguageId]</languageid>
    <gridmap type="boolean">false</gridmap>
    <mapscale type="int">30</mapscale>
    <mapsize type="int">300</mapsize>
    <changedpov type="script">
      InitPOV (oldvalue, game.pov)
    </changedpov>
    <feature_lightdark type="boolean">false</feature_lightdark>
    <feature_pictureframe type="boolean">false</feature_pictureframe>
    <feature_limitinventory type="boolean">false</feature_limitinventory>
    <feature_asktell type="boolean">false</feature_asktell>
    <feature_annotations type="boolean">false</feature_annotations>
    <feature_advancedwearables type="boolean">false</feature_advancedwearables>
    <feature_advancedscripts type="boolean">false</feature_advancedscripts>
    <deactivatecommandlinks type="boolean">false</deactivatecommandlinks>
    <multiplecommands type="boolean">false</multiplecommands>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg</publishfileextensions>
  </type>

  <type name="theme_novella">
    <setcustompadding/>
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth/>
    <customwidth type="int">650</customwidth>
    <setcustompadding/>
    <custompaddingtop type="int">60</custompaddingtop>
  </type>

  <type name="theme_retro">
    <defaultbackground>Black</defaultbackground>
    <defaultforeground>White</defaultforeground>
    <defaultlinkforeground>White</defaultlinkforeground>
    <defaultfont>'Lucida Console', Monaco, monospace</defaultfont>
    <defaultwebfont>Press Start 2P</defaultwebfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>'Lucida Console', Monaco, monospace</menufont>
    <menubackground>Black</menubackground>
    <menuforeground>White</menuforeground>
    <menuhoverbackground>GreenYellow</menuhoverbackground>
  </type>

  <type name="theme_typewriter">
    <setcustompadding/>
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth/>
    <customwidth type="int">650</customwidth>
    <setcustompadding/>
    <custompaddingtop type="int">60</custompaddingtop>
    <defaultfont>'Courier New', Courier, monospace</defaultfont>
    <defaultwebfont>Special Elite</defaultwebfont>
  </type>

  <type name="theme_hotdogstand">
    <defaultbackground>Red</defaultbackground>
    <defaultforeground>Yellow</defaultforeground>
    <defaultlinkforeground>Yellow</defaultlinkforeground>
    <defaultfont>'Comic Sans MS', cursive, sans-serif</defaultfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>Impact, Charcoal, sans-serif</menufont>
    <menubackground>Red</menubackground>
    <menuforeground>Yellow</menuforeground>
    <menuhoverbackground>Black</menuhoverbackground>
    <menuhoverforeground>Yellow</menuhoverforeground>
  </type>

  <type name="defaultobject">
    <visible/>
    <displayverbs type="simplestringlist">[LookAt];[Take]</displayverbs>
    <inventoryverbs type="simplestringlist">[LookAt];[Use];[Drop]</inventoryverbs>
    <take type="boolean">false</take>
    <use type="boolean">false</use>
    <givesingle type="boolean">false</givesingle>
    <drop/>
    <gender>[NeutralGender]</gender>
    <article>[NeutralArticle]</article>
    <possessive>[NeutralPossessive]</possessive>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>[YouAreIn]</descprefix>
    <objectslistprefix>[SeeListHeader]</objectslistprefix>
    <exitslistprefix>[GoListHeader]</exitslistprefix>
    <contentsprefix>[ContainerContentsPrefix]</contentsprefix>
    <description type="string"></description>
    <implementation_notes type="string"></implementation_notes>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix/>
    <changedparent type="script">
      if (game.pov = this) {
        if (IsDefined("oldvalue")) {
          OnEnterRoom(oldvalue)
        }
        else {
          OnEnterRoom(null)
        }
        if (game.gridmap) {
          MergePOVCoordinates
        }
      }
      this.hasbeenmoved = true
    </changedparent>
    <changedisopen type="script">
      if (this.isopen and HasScript(this, "onopen")) {
        do (this, "onopen")
      }
      if (not this.isopen and HasScript(this, "onclose")) {
        do (this, "onclose")
      }
    </changedisopen>
    <changedlocked type="script">
      if (this.locked and HasScript(this, "onlock")) {
        do (this, "onlock")
      }
      if (not this.locked and HasScript(this, "onunlock")) {
        do (this, "onunlock")
      }
    </changedlocked>
    <changedswitchedon type="script">
      if (this.switchedon and HasScript(this, "onswitchon")) {
        do (this, "onswitchon")
      }
      if (not this.switchedon and HasScript(this, "onswitchoff")) {
        do (this, "onswitchoff")
      }
    </changedswitchedon>
    <volume type="int">0</volume>
    <price type="int">0</price>
    <dark type="boolean">false</dark>
    <lightstrength type="string"></lightstrength>
    <darklevel type="boolean">false</darklevel>
    <grid_width type="int">1</grid_width>
    <grid_length type="int">1</grid_length>
    <grid_fill>White</grid_fill>
    <grid_border>Black</grid_border>
    <grid_borderwidth type="int">1</grid_borderwidth>
    <grid_bordersides type="int">15</grid_bordersides>
    <grid_render type="boolean">false</grid_render>
    <grid_label type="string"></grid_label>
    <grid_label_colour type="string">Black</grid_label_colour>
    <grid_parent_offset_auto/>
    <grid_parent_offset_x type="int">0</grid_parent_offset_x>
    <grid_parent_offset_y type="int">0</grid_parent_offset_y>
    <pov_alias>[SelfAlias]</pov_alias>
    <pov_alt type="simplestringlist">[SelfAlt]</pov_alt>
    <pov_look>[DefaultSelfDescription]</pov_look>
    <pov_gender>[SelfGender]</pov_gender>
    <pov_article>[SelfArticle]</pov_article>
    <pov_possessive>[SelfPossessive]</pov_possessive>
    <feature_usegive type="boolean">false</feature_usegive>
    <feature_container type="boolean">false</feature_container>
    <feature_switchable type="boolean">false</feature_switchable>
    <feature_edible type="boolean">false</feature_edible>
    <feature_player type="boolean">false</feature_player>
    <feature_lightdark type="boolean">false</feature_lightdark>
    <visited type="boolean">false</visited>
    <hasbeenmoved type="boolean">false</hasbeenmoved>
  </type>

  <type name="defaultexit">
    <displayverbs type="simplestringlist">[GoTo]</displayverbs>
    <visible type="boolean">true</visible>
    <scenery type="boolean">false</scenery>
    <locked type="boolean">false</locked>
    <lockmessage>[LockedExit]</lockmessage>
    <lookonly type="boolean">false</lookonly>
    <runscript type="boolean">false</runscript>
    <lightstrength type="string"></lightstrength>  
    <grid_length type="int">1</grid_length>
    <grid_render type="boolean">false</grid_render>
    <grid_offset_x type="int">0</grid_offset_x>
    <grid_offset_y type="int">0</grid_offset_y>
  </type>

  <type name="direction">
    <displayverbs type="simplestringlist">[Go]</displayverbs>
  </type>

  <type name="compassdirection">
    <inherit name="direction"/>
    <prefix type="string">[CompassDirectionPrefix]</prefix>
    <suffix type="string">[CompassDirectionSuffix]</suffix>
  </type>

  <type name="updowndirection">
    <inherit name="direction"/>
    <prefix type="string">[UpDownDirectionPrefix]</prefix>
    <suffix type="string">[UpDownDirectionSuffix]</suffix>
  </type>

  <type name="inoutdirection">
    <inherit name="direction"/>
    <prefix type="string">[InOutDirectionPrefix]</prefix>
    <suffix type="string">[InOutDirectionSuffix]</suffix>
  </type>

  <type name="northwestdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassNW]</alias>
    <alt type="simplestringlist">[CompassNWShort]</alt>
  </type>

  <type name="northdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassN]</alias>
    <alt type="simplestringlist">[CompassNShort]</alt>
  </type>

  <type name="northeastdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassNE]</alias>
    <alt type="simplestringlist">[CompassNEShort]</alt>
  </type>

  <type name="westdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassW]</alias>
    <alt type="simplestringlist">[CompassWShort]</alt>
  </type>

  <type name="eastdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassE]</alias>
    <alt type="simplestringlist">[CompassEShort]</alt>
  </type>

  <type name="southwestdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassSW]</alias>
    <alt type="simplestringlist">[CompassSWShort]</alt>
  </type>

  <type name="southdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassS]</alias>
    <alt type="simplestringlist">[CompassSShort]</alt>
  </type>

  <type name="southeastdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassSE]</alias>
    <alt type="simplestringlist">[CompassSEShort]</alt>
  </type>

  <type name="updirection">
    <inherit name="updowndirection"/>
    <alias>[CompassUp]</alias>
    <alt type="simplestringlist">[CompassUpShort]</alt>
  </type>

  <type name="downdirection">
    <inherit name="updowndirection"/>
    <alias>[CompassDown]</alias>
    <alt type="simplestringlist">[CompassDownShort]</alt>
  </type>

  <type name="indirection">
    <inherit name="inoutdirection"/>
    <alias>[CompassIn]</alias>
    <alt type="simplestringlist">[CompassInShort]</alt>
  </type>

  <type name="outdirection">
    <inherit name="inoutdirection"/>
    <alias>[CompassOut]</alias>
    <alt type="simplestringlist">[CompassOutShort]</alt>
  </type>

  <type name="defaultcommand">
    <pattern type="simplepattern"></pattern>
  </type>

  <type name="defaultverb">
    <separator>[VerbObjectSeparator]</separator>
    <multiobjectmenu>[MultiObjectVerbMenu]</multiobjectmenu>
    <multiobjectdefault>[DefaultMultiObjectVerb]</multiobjectdefault>
    <multiobjectmenuempty>[NoObjectsAvailable]</multiobjectmenuempty>
    <script type="script">
      <![CDATA[
      if (not IsDefined("object2")) {
        object2 = null
      }
      
      switch (TypeOf(object, this.property)) {
        case ("script") {
          if (object2 = null) {
            do (object, this.property)
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("string") {
          if (object2 = null) {
            msg (GetString(object, this.property))
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("scriptdictionary") {
          if (object2 <> null) {
            HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)
          }
          else {
            objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())
            excludelist = NewObjectList()
            list add (excludelist, game.pov)
            list add (excludelist, object)
            candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
            if (ListCount(candidates) = 0) {
              msg (this.multiobjectmenuempty)
            }
            else {
              game.pov.multiverb = this.property
              game.pov.multiverbobject = object
              game.pov.multiverbobjectdefault = this.multiobjectdefault
              ShowMenu (this.multiobjectmenu, candidates, true) {
                if (result <> null) {
                  HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)
                  game.pov.multiverb = null
                  game.pov.multiverbobject = null
                  game.pov.multiverbobjectdefault = null
                }
              }
            }
          }
        }
        case ("null") {
          if (this.defaulttext <> null) {
            msg (this.defaulttext)
          }
          else if (this.defaulttemplate <> null) {
            msg (DynamicTemplate(this.defaulttemplate, object))
          }
          else if (this.defaultexpression <> null) {
            params = NewDictionary()
            dictionary add (params, "object", object)
            msg (Eval(this.defaultexpression, params))
          }
          else {
            error ("No verb response defined")
          }
        }
        default {
          error ("No verb response defined")
        }
      }
      ]]>
    </script>
  </type>

  <type name="npc_type">
    <displayverbs type="simplestringlist">[LookAt];[SpeakTo]</displayverbs>
  </type>

  <type name="male">
    <inherit name="npc_type" />
    <gender>[MaleGender]</gender>
    <article>[MaleArticle]</article>
    <possessive>[MalePossessive]</possessive>
  </type>
  
  <type name="namedmale">
    <inherit name="male" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>

  <type name="female">
    <inherit name="npc_type" />
    <displayverbs type="simplestringlist">[LookAt];[SpeakTo]</displayverbs>
    <gender>[FemaleGender]</gender>
    <article>[FemaleArticle]</article>
    <possessive>[FemalePossessive]</possessive>
  </type>
  
  <type name="namedfemale">
    <inherit name="female" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>

  <type name="plural">
    <gender>[NeutralPluralGender]</gender>
    <article>[NeutralPluralArticle]</article>
    <possessive>[NeutralPluralPossessive]</possessive>
  </type>

  <type name="maleplural">
    <displayverbs type="simplestringlist">[LookAt];[SpeakTo]</displayverbs>
    <gender>[MalePluralGender]</gender>
    <article>[MalePluralArticle]</article>
    <possessive>[MalePluralPossessive]</possessive>
  </type>

  <type name="femaleplural">
    <displayverbs type="simplestringlist">[LookAt];[SpeakTo]</displayverbs>
    <gender>[FemalePluralGender]</gender>
    <article>[FemalePluralArticle]</article>
    <possessive>[FemalePluralPossessive]</possessive>
  </type>

  <type name="openable">
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <inventoryverbs type="listextend">[Open];[Close]</inventoryverbs>
    <open/>
    <close/>
  </type>

  <type name="container_base">
    <container/>
  </type>

  <type name="container_closed">
    <inherit name="container_base"/>
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <inventoryverbs type="listextend">[Open];[Close]</inventoryverbs>
    <open/>
    <close/>
  </type>

  <type name="container_open">
    <inherit name="container_base"/>
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <inventoryverbs type="listextend">[Open];[Close]</inventoryverbs>
    <isopen/>
    <open/>
    <close/>
  </type>

  <type name="surface">
    <inherit name="container_base"/>
    <isopen/>
    <transparent/>
    <contentsprefix>[SurfaceContentsPrefix]</contentsprefix>
  </type>

  <type name="container">
    <inherit name="container_open"/>
  </type>

  <type name="container_limited">
    <inherit name="container"/>
    <maxobjects type="int">1</maxobjects>
    <maxvolume type="int">100</maxvolume>
    <addscript type="script">
      activecontainer = this
      correct = true
      while (DoesInherit(activecontainer, "container_base")) {
        if (HasInt(activecontainer, "maxvolume")) {
          if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {
            correct = false
            if (HasString(this, "containerfullmessage")) {
              message = this.containerfullmessage
            }
            else {
              message = DynamicTemplate("ContainerFull", this)
            }
          }
        }
        activecontainer = activecontainer.parent
      }
    
      children = GetDirectChildren(this)
      if (listcount(children) >= this.maxobjects) {
        correct = false
        if (HasString(this, "containermaxobjects")) {
          message = this.containermaxobjects
        }
        else {
          message=DynamicTemplate("MaxObjectsInContainer", this)
        }
      }
    
      if (correct = false) {
        msg (message)
      }
      else {
        if (HasScript(object, "drop")) {
          params = NewDictionary()
          dictionary add (params, "destination", this)
          do (object, "drop", params)
        }
        else {
          object.parent = this
          msg (Template("Done"))
        }      
      }
    </addscript>
  </type>
  
  <type name="container_lockable">
    <openscript type="script">
      if (this.locked) {
        if (this.autounlock and AllKeysAvailable(this)) {
          do (this, "unlock")
          if (not this.isopen) {
            OpenObject (this)
          }
        }
        else {
          msg (DynamicTemplate("LockedObject", this))
        }
      }
      else {
        OpenObject (this)
      }
    </openscript>
    <closescript type="script">
      if (this.locked) {
        msg (DynamicTemplate("LockedObject", this))
      }
      else {
        CloseObject (this)
      }
    </closescript>
    <lock type="script">
      if (this.locked) {
        msg (DynamicTemplate("AlreadyLocked", this))
      }
      else if (this.isopen and not this.canlockopen) {
        msg (DynamicTemplate("CannotLockOpen", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.lockmessage)
          this.locked = true
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </lock>
    <unlock type="script">
      if (not this.locked) {
        msg (DynamicTemplate("AlreadyUnlocked", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.unlockmessage)
          this.locked = false
          if (this.autoopen and not this.isopen) {
            TryOpenClose (true, this)
          }
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </unlock>
    <locked/>
    <nokeymessage>[NoKey]</nokeymessage>
    <unlockmessage>[UnlockMessage]</unlockmessage>
    <lockmessage>[LockMessage]</lockmessage>
    <canlockopen type="boolean">false</canlockopen>
    <autoopen/>
    <autounlock/>
  </type>

  <type name="defaultplayer">
    <inherit name="editor_player"/>
    <inherit name="editor_object"/>
    <money type="int">0</money>
  </type>

  <type name="switchable">
    <displayverbs type="listextend">[SwitchOn];[SwitchOff]</displayverbs>
    <inventoryverbs type="listextend">[SwitchOn];[SwitchOff]</inventoryverbs>
    <switchedon type="boolean">false</switchedon>
    <cannotswitchon type="string"></cannotswitchon>
    <turnon type="script">
      if (ListContains(ScopeReachable(), this)){
        if (this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOn", this))
        }
        else if (not this.cannotswitchon = "") {
          msg (this.cannotswitchon)
        }
        else {
          if (HasString(this, "switchonmsg")) {
            msg (this.switchonmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOn", this))
          }
          this.switchedon = true
        }
      } 
      else {
        msg(DynamicTemplate("DefaultTurnOn", this))
      }            
    </turnon>
    <turnoff type="script">
      if (ListContains(ScopeReachable(), this)){
        if (not this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOff", this))
        }
        else {
          if (HasString(this, "switchoffmsg")) {
            msg (this.switchoffmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOff", this))
          }
          this.switchedon = false
        }
      } 
      else {
        msg(DynamicTemplate("DefaultTurnOff", this))
      }        
    </turnoff>
  </type>

  <type name="edible">
    <displayverbs type="listextend">[Eat]</displayverbs>
    <inventoryverbs type="listextend">[Eat]</inventoryverbs>
    <eat type="script">
      if (HasString(this, "eatmsg")) {
        msg (this.eatmsg)
      }
      else {
        msg (DynamicTemplate("Eaten", this))
      }
      if (HasInt(game.pov, "health")) {
        game.pov.health = game.pov.health + this.eathealth
      }
      destroy (this.name)
    </eat>
    <eathealth type="int">0</eathealth>
  </type>

  <type name="gridborder_path_ew">
    <grid_bordersides type="int">10</grid_bordersides>
  </type>

  <type name="gridborder_path_e">
    <grid_bordersides type="int">11</grid_bordersides>
  </type>

  <type name="gridborder_path_w">
    <grid_bordersides type="int">14</grid_bordersides>
  </type>

  <type name="gridborder_path_ns">
    <grid_bordersides type="int">5</grid_bordersides>
  </type>

  <type name="gridborder_path_n">
    <grid_bordersides type="int">7</grid_bordersides>
  </type>

  <type name="gridborder_path_s">
    <grid_bordersides type="int">13</grid_bordersides>
  </type>

</library>
