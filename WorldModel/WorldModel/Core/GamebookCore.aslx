<library>
  <include ref="EditorEnglish.aslx"/>
  <include ref="CoreOutput.aslx"/>
  <include ref="CoreEffects.aslx"/>
  <include ref="GamebookCoreEditor.aslx"/>

  <type name="defaultgame">
    <_editorstyle>gamebook</_editorstyle>
    <defaultfont>Georgia, serif</defaultfont>
    <defaultfontsize type="int">12</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <menufont>Arial</menufont>
    <menufontsize type="int">9</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <description type="string"></description>
    <setcustomwidth type="boolean">true</setcustomwidth>
    <customwidth type="int">700</customwidth>
    <setcustompadding type="boolean">false</setcustompadding>
    <custompaddingtop type="int">30</custompaddingtop>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">20</custompaddingleft>
    <custompaddingright type="int">20</custompaddingright>
    <showborder type="boolean">false</showborder>
    <showtitle/>
    <noclear type="boolean">false</noclear>
    <clearlastpage type="boolean">false</clearlastpage>
    <deactivatecommandlinks type="boolean">false</deactivatecommandlinks>
    <suppressturnscripts/>
    <!-- Scripts used by the text processor -->
    <textprocessorcommands type="scriptdictionary">
      <item key="if ">
        game.textprocessorcommandresult = ProcessTextCommand_If (section, data)
      </item>
      <item key="either ">
        game.textprocessorcommandresult = ProcessTextCommand_Either (section, data)
      </item>
      <item key="here ">
        game.textprocessorcommandresult = ProcessTextCommand_Here (section, data)
      </item>
      <item key="nothere ">
        game.textprocessorcommandresult = ProcessTextCommand_Here (section, data)
      </item>
      <item key="popup:">
        game.textprocessorcommandresult = ProcessTextCommand_Popup (section, data)
      </item>
      <item key="i:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="b:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="s:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="u:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="colour:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="color:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="back:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="object:">
        game.textprocessorcommandresult = ProcessTextCommand_Object (section, data)
      </item>
      <item key="command:">
        game.textprocessorcommandresult = ProcessTextCommand_Command (section, data)
      </item>
      <item key="page:">
        game.textprocessorcommandresult = ProcessTextCommand_Command (section, data)
      </item>
      <item key="exit:">
        game.textprocessorcommandresult = ProcessTextCommand_Exit (section, data)
      </item>
      <item key="once:">
        game.textprocessorcommandresult = ProcessTextCommand_Once (section, data)
      </item>
      <item key="notfirst:">
        game.textprocessorcommandresult = ProcessTextCommand_NotFirst (section, data)
      </item>
      <item key="random:">
        game.textprocessorcommandresult = ProcessTextCommand_Random (section, data)
      </item>
      <item key="rndalt:">
        game.textprocessorcommandresult = ProcessTextCommand_RandomAlias (section, data)
      </item>
      <item key="img:">
        game.textprocessorcommandresult = ProcessTextCommand_Img (section, data)
      </item>
      <item key="counter:">
        game.textprocessorcommandresult = ProcessTextCommand_Counter (section, data)
      </item>
      <item key="select:">
        game.textprocessorcommandresult = ProcessTextCommand_Select (section, data)
      </item>
      <item key="eval:">
        game.textprocessorcommandresult = ProcessTextCommand_Eval (section, data)
      </item>
      <item key="=">
        game.textprocessorcommandresult = ProcessTextCommand_Eval (section, data)
      </item>
    </textprocessorcommands>
  </type>

  <type name="defaultobject">
    <description type="string"></description>
  </type>

  <type name="defaultplayer">
    <changedparent type="script">
      DoPage(player.parent)
    </changedparent>
  </type>

  <type name="picture">
  </type>

  <type name="youtube">
  </type>

  <type name="link">
    <address>http://</address>
  </type>

  <type name="script">
    <runscriptonly/>
  </type>

  <type name="scripttext">
    <runscript/>
  </type>

  <template name="NothingToUndo">Nothing to undo!</template>

  <function name="InitInterface">
    if (game.setcustomwidth) {
      JS.setGameWidth(game.customwidth)
    }
    if (not game.showborder) {
      JS.hideBorder()
    }
    if (game.setcustompadding) {
      JS.setGamePadding(game.custompaddingtop, game.custompaddingbottom, game.custompaddingleft, game.custompaddingright)
    }
    SetBackgroundColour(game.defaultbackground)
    SetForegroundColour(game.defaultforeground)
    SetLinkForegroundColour(game.defaultlinkforeground)
    JS.SetMenuBackground(game.menubackground)
    JS.SetMenuForeground(game.menuforeground)
    JS.SetMenuHoverBackground(game.menuhoverbackground)
    JS.SetMenuHoverForeground(game.menuhoverforeground)
    JS.SetMenuFontName(game.menufont)
    JS.SetMenuFontSize(game.menufontsize + "pt")
    JS.panesVisible(false)
    JS.uiHide("#location")
    JS.uiHide("#txtCommandDiv")
  </function>

  <function name="StartGame">
    <![CDATA[
    if (game.showtitle) {
      PrintCentered ("<span style=\"font-size:260%\">" + game.gamename + "</span>")
      if (game.subtitle <> null) {
        if (LengthOf(game.subtitle) > 0) {
          PrintCentered ("<span style=\"font-size:130%\">" + game.subtitle + "</span>")
        }
      }
      if (game.author <> null) {
        if (LengthOf(game.author) > 0) {
          PrintCentered ("<br/><span style=\"font-size:140%\">" + game.author + "</span>")
        }
      }
      msg ("<div style=\"margin-top:20px\"></div>")
    }
    game.noclear = true
    DoPage(player.parent)
    game.noclear = false
    ]]>
  </function>

  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    return (result)
  </function>

  <function name="GetPlacesObjectsList" type="objectlist">
    result = NewObjectList()
    return (result)
  </function>

  <function name="ScopeExits" type="objectlist">
    result = NewObjectList()
    return (result)
  </function>

  <function name="ScopeCommands" type="objectlist">
    result = NewObjectList()
    foreach (command, AllCommands()) {
      if (command.parent = game.pov.parent) {
        list add(result, command)
      }
    }
    return (result)
  </function>

  <function name="HandleCommand" parameters="command">
    <![CDATA[
    if (command = "undo") {
      // ignore
    }
    else {
      newpage = GetObject(command)
      if (newpage = null) {
        msg ("Error - no page named '" + command + "'")
      }
      else {
        if (not game.clearlastpage and HasAttribute(player.parent, "options")) {
          if (DictionaryContains(player.parent.options, command)) {
            optiontext = StringDictionaryItem(player.parent.options, command)
            msg ("<b>" + optiontext + "</b>")
            msg ("")
          }
          JS.disableAllCommandLinks()
        }
        player.parent = GetObject(command)
      }
    }
    ]]>
  </function>

  <function name="DoPage" parameters="page">
    <![CDATA[
    parent = player.parent
    if (game.clearlastpage) {
      if (not game.noclear) {
        ClearScreen
      }
    }
    else {
      if (HasString(game, "optionsoutputsection")) {
        HideOutputSection(game.optionsoutputsection)
      }
    }    
    if (not GetBoolean(game, "continuesound")) {
      stop sound
    }
    if (HasScript( game, "roomenter")) {
      do (game, "roomenter")
    }
    on ready {
      if (GetBoolean(player.parent, "runscript") or GetBoolean(player.parent, "runscriptonly")) {
        if (HasScript(player.parent, "script")) {
          do (player.parent, "script")
        }
        else {
          msg ("No script has been created for this page.")
        }
      }
      // script may have moved the player, so finish DoPage if parent has changed
      if (parent = player.parent and not GetBoolean(player.parent, "runscriptonly")) {
        if (HasString(player.parent, "sound")) {
          if (LengthOf(player.parent.sound) > 0) {
            play sound (player.parent.sound, false, false)
            game.continuesound = GetBoolean(player.parent, "continuesound")
          }
        } 
    
        if (HasString(player.parent, "picture")) {
          if (LengthOf(player.parent.picture) > 0) {
            picture (player.parent.picture)
            msg ("")
          }
        }
        if (HasString(player.parent, "youtube")) {
          if (LengthOf(player.parent.youtube) > 0) {
            JS.AddYouTube(player.parent.youtube)
            msg ("")
            msg ("")
          }
        }
        msg (player.parent.description)
        msg ("")
        msg ("")
        game.optionsoutputsection = StartNewOutputSection()
        if (TypeOf(player.parent, "options") = "stringdictionary") {
          foreach (key, player.parent.options) {
            destination = GetObject(key)
            if (destination = null) {
              msg (StringDictionaryItem(player.parent.options, key) + " (broken link)")
            }
            else {
              if (DoesInherit(destination, "link")) {
                msg ("<a href=\"" + destination.address + "\">" + StringDictionaryItem(player.parent.options, key) + "</a>")
              }
              else {
                msg (CommandLink(key, StringDictionaryItem(player.parent.options, key)))
              }
            }
            msg ("")
          }
        }
        EndOutputSection (game.optionsoutputsection)
      }  
    }
    set (player.parent, "visited", true)
    ]]>
  </function>
  
  <function name="StartNewOutputSection" type="string">
    if (not HasInt(game, "lastoutputsection")) {
      game.lastoutputsection = 0
    }
    game.lastoutputsection = game.lastoutputsection + 1
    name = "section" + game.lastoutputsection
    JS.StartOutputSection(name)
    return (name)
  </function>

  <function name="EndOutputSection" parameters="name">
    JS.EndOutputSection(name)
  </function>

  <function name="HideOutputSection" parameters="name">
    JS.HideOutputSection(name)
  </function>

  <function name="RandomChance" parameters="percentile" type="boolean">
    <![CDATA[
    return (GetRandomInt(1,100) <= percentile)
    ]]>
  </function>

  <function name="HasSeenPage" parameters="page" type="boolean">
    return (GetBoolean(page, "visited"))
  </function>

  <function name="SetFlagOn" parameters="flag">
    set (game, flag, true)
  </function>

  <function name="SetFlagOff" parameters="flag">
    set (game, flag, false)
  </function>

  <function name="SetCounter" parameters="counter, value">
    set (game, counter, value)
  </function>

  <function name="ChangeCounter" parameters="counter, value">
    if (not HasInt(game, counter)) {
      set (game, counter, 0)
    }
    set (game, counter, GetInt(game, counter) + value)
  </function>
  
  <function name="IncreaseCounter" parameters="counter">
    if (not HasInt(game, counter)) {
      set (game, counter, 0)
    }
    set (game, counter, GetInt(game, counter) + 1)
  </function>

  <function name="DecreaseCounter" parameters="counter">
    if (not HasInt(game, counter)) {
      set (game, counter, 0)
    }
    set (game, counter, GetInt(game, counter) - 1)
  </function>

  <function name="GetInput" parameters="callback">
    JS.uiShow("#txtCommandDiv")
    get input {
      JS.uiHide("#txtCommandDiv")
      parameters = NewStringDictionary()
      dictionary add (parameters, "result", result)
      invoke (callback, parameters)
    }
  </function>

  <function name="AddPageLink" parameters="source, destination, text">
    RemovePageLink (source, destination)
    dictionary add (source.options, destination.name, text)
  </function>
  
  <function name="RemovePageLink" parameters="source, destination">
    if (source.options = null) {
      source.options = NewStringDictionary()
    }
    if (DictionaryContains(source.options, destination.name)) {
      dictionary remove (source.options, destination.name)
    }
  </function>

  <function name="MovePlayer" parameters="destination">
    player.parent = destination
  </function>

</library>
