<library>
  <function name="DiceRoll" parameters="dice" type="int">
    if (TypeOf(dice) = "int") return (dice)
    p1 = Instr(dice, "d")
    p2 = Instr(dice, "+")
    p4 = Instr(dice, "-")
    p3 = LengthOf(dice)
    if (p1 = 0) {
      if (IsInt(dice)) return (ToInt(dice))
      error ("Invalid dice type: " + dice)
    }
    number_str = Mid(dice, 1, p1 - 1)
    if (LengthOf(number_str) = 0) {
      number = 1
    }
    else {
      number = ToInt(number_str)
    }
    if (p2 > 0) {
      sides = ToInt(Mid(dice, p1 + 1, p2 - p1 - 1))
      total = ToInt(Mid(dice, p2 + 1, p3 - p2))
    }
    else if (p4 > 0) {
      sides = ToInt(Mid(dice, p1 + 1, p4 - p1 - 1))
      total = -ToInt(Mid(dice, p4 + 1, p3 - p2))
    }
    else {
      sides = ToInt(Mid(dice, p1 + 1, p3 - p1))
      total = 0
    }
    for (i, 1, number) {
      total = total + GetRandomInt(1, sides)
    }
    return (total)    
  </function>
  
  <function name="PickOneObject" parameters="lst" type="object">
    n = ListCount(lst)
    if (n = 0) return (null)
    index = GetRandomInt(0, n - 1)
    return (ObjectListItem(lst, index))
  </function>
  
  <function name="PickOneString" parameters="lst" type="string">
    if (TypeOf(lst) = "string") {
      lst = Split(lst, ";")
    }
    n = ListCount(lst)
    if (n = 0) return ("")
    index = GetRandomInt(0, n - 1)
    return (StringListItem(lst, index))
  </function>
  
  <function name="PickOneChild" parameters="obj" type="object">
    return (PickOneObject(GetDirectChildren(obj)))
  </function>
  
  <function name="PickOneChildOfType" parameters="room, typename" type="object">
    l = NewObjectList()
    foreach (o, GetDirectChildren(room)) {
      if (DoesInherit(o, typename)) {
        list add (l, o)
      }
    }
    return (PickOneObject(l))
  </function>
    
  <function name="PickOneExit" parameters="room" type="object">
    return (PickOneObject(ScopeExitsForRoom (room)))
  </function> 
  
  <function name="PickOneUnlockedExit" parameters="room" type="object">
    return (PickOneObject(ScopeUnlockedExitsForRoom (room)))
  </function> 
  
    
  
</library>