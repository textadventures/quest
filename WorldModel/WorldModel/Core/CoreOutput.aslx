<library>
  <function name="OutputText" parameters="text">
    <![CDATA[
    OutputTextRaw(ProcessText(text))
    ]]>
  </function>

  <function name="OutputTextRaw" parameters="text">
    <![CDATA[
    format = GetCurrentTextFormat("")
    JS.addText("<span style=\"" + format + "\">" + text + "</span><br/>")
    if (GetString(game, "commandbarformat") <> format) {
      ResetCommandBarFormat
    }
    request (Speak, text)
    ]]>
  </function>

  <function name="ResetCommandBarFormat">
    format = GetCurrentTextFormat("") + ";background:" + game.defaultbackground
    game.commandbarformat = format
    JS.setCommandBarStyle(format)
  </function>

  <function name="OutputTextNoBr" parameters="text">
    <![CDATA[
    OutputTextRawNoBr(ProcessText(text))
    ]]>
  </function>

  <function name="OutputTextRawNoBr" parameters="text">
    <![CDATA[
    JS.addText("<span style=\"" + GetCurrentTextFormat("") + "\">" + text + "</span>")
    request (Speak, text)
    ]]>
  </function>

  <function name="GetCurrentTextFormat" type="string" parameters="colour">
    style = ""
    
    if (UIOptionUseGameFont()) {
      font = GetCurrentFontFamily()
    }
    else {
      font = GetUIOption("OverrideFontName")
    }
    
    if (LengthOf(font) > 0) {
      style = style + "font-family:" + font + ";"
    }
    
    if (LengthOf(colour) = 0) {
      if (UIOptionUseGameColours()) {
        colour = game.defaultforeground
      }
      else {
        colour = GetUIOption("OverrideForeground")
      }
    }
    if (LengthOf(colour) > 0) {
      style = style + "color:" + colour + ";"
    }
    
    if (UIOptionUseGameFont()) {
      size = game.defaultfontsize
    }
    else {
      size = ToDouble(GetUIOption("OverrideFontSize"))
    }
    if (size > 0) {
      style = style + "font-size:" + ToString(size) + "pt;"
    }
    
    return (style)
  </function>

  <function name="GetCurrentLinkTextFormat" type="string">
    return (GetCurrentTextFormat(GetLinkTextColour()))
  </function>
  
  <function name="UIOptionUseGameFont" type="boolean">
    value = GetUIOption("UseGameFont")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>

  <function name="UIOptionUseGameColours" type="boolean">
    value = GetUIOption("UseGameColours")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>

    
  <function name="GetLinkTextColour" type="string">
    if (UIOptionUseGameColours()) {
      return (game.defaultlinkforeground)
    }
    else {
      return (GetUIOption("OverrideLinkForeground"))
    }
  </function>
  
  <function name="ProcessText" type="string" parameters="text">
    data = NewDictionary()
    dictionary add (data, "fulltext", text)
    text = ProcessTextSection(text, data)
    return (Replace(Replace(text, "@@@open@@@", "{"), "@@@close@@@", "}"))
  </function>
  
  <function name="ProcessTextSection" type="string" parameters="text, data">
    <![CDATA[
    
    containsUnprocessedSection = false
    
    open = Instr(text, "{")
    
    if (open > 0) {
      nestCount = 1
      searchStart = open + 1
      finished = false
      
      while (not finished) {
        nextOpen = Instr(searchStart, text, "{")
        nextClose = Instr(searchStart, text, "}")
      
        if (nextClose > 0) {
          if (nextOpen > 0 and nextOpen < nextClose) {
            nestCount = nestCount + 1
            searchStart = nextOpen + 1
          }
          else {
            nestCount = nestCount - 1
            searchStart = nextClose + 1
            if (nestCount = 0) {
              close = nextClose
              containsUnprocessedSection = true
              finished = true
            }
          }
        }
        else {
          finished = true
        }
      }
    }
    
    if (containsUnprocessedSection) {
      section = Mid(text, open + 1, close - open - 1)
      value = ProcessTextCommand(section, data)
      value = ProcessTextSection(value, data)
      text = Left(text, open - 1) + value + ProcessTextSection(Mid(text, close + 1), data)
    }
    
    return (text)
    ]]>
  </function>

  <function name="ProcessTextCommand" type="string" parameters="section, data">
    if (StartsWith(section, "if ")) {
      return (ProcessTextCommand_If(section, data))
    }
    else if (StartsWith(section, "either ")) {
      return (ProcessTextCommand_Either(section, data))
    }
    else if (StartsWith(section, "here ")) {
      return (ProcessTextCommand_Here(section, data, true))
    }
    else if (StartsWith(section, "nothere ")) {
      return (ProcessTextCommand_Here(section, data, false))
    }
    else if (StartsWith(section, "popup:")) {
      return (ProcessTextCommand_Popup(Mid(section, 7), data))
    }
    else if (StartsWith(section, "i:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "i"))
    }
    else if (StartsWith(section, "u:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "u"))
    }
    else if (StartsWith(section, "b:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "b"))
    }
    else if (StartsWith(section, "s:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "s"))
    }
    else if (StartsWith(section, "color:")) {
      return (ProcessTextCommand_Colour(Mid(section, 7), data))
    }
    else if (StartsWith(section, "colour:")) {
      return (ProcessTextCommand_Colour(Mid(section, 8), data))
    }
    else if (StartsWith(section, "back:")) {
      return (ProcessTextCommand_Background(Mid(section, 6), data))
    }
    else if (StartsWith(section, "object:")) {
      return (ProcessTextCommand_Object(section, data))
    }
    else if (StartsWith(section, "command:")) {
      return (ProcessTextCommand_Command(Mid(section, 9), data))
    }
    else if (StartsWith(section, "page:")) {
      return (ProcessTextCommand_Command(Mid(section, 6), data))
    }
    else if (StartsWith(section, "exit:")) {
      return (ProcessTextCommand_Exit(section, data))
    }
    else if (StartsWith(section, "once:")) {
      return (ProcessTextCommand_Once(section, data))
    }
    else if (StartsWith(section, "notfirst:")) {
      return (ProcessTextCommand_NotFirst(section, data))
    }
    else if (StartsWith(section, "random:")) {
      return (ProcessTextCommand_Random(section, data))
    }
    else if (StartsWith(section, "rndalt:")) {
      return (ProcessTextCommand_RandomAlias(section, data))
    }
    else if (StartsWith(section, "img:")) {
      return (ProcessTextCommand_Img(section, data))
    }
    else if (StartsWith(section, "counter:")) {
      return (ProcessTextCommand_Counter(Mid(section, 9), data))
    }
    else if (StartsWith(section, "select:")) {
      return (ProcessTextCommand_Select(section, data))
    }
    else if (StartsWith(section, "eval:")) {
      return (ProcessTextCommand_Eval(Mid(section, 6), data))
    }
    else if (StartsWith(section, "=")) {
      return (ProcessTextCommand_Eval(Mid(section, 2), data))
    }
    else {
      dot = Instr(section, ".")
      if (dot = 0) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else {
        objectname = Left(section, dot - 1)
        attributename = Mid(section, dot + 1)
        if (objectname = "this") {
          object = game.text_processor_this
        }
        else {
          object = GetObject(objectname)
        }
        if (object = null) {
          return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
        }
        else {
          if (HasAttribute(object, attributename)) {
            type = TypeOf(object, attributename)
            switch (type) {
              case ("string", "int", "double") {
                return (ToString(GetAttribute(object, attributename)))
              }
              case ("boolean") {
                result = GetAttribute(object, attributename)
                if (result) {
                  return ("true")
                }
                else {
                  return ("false")
                }
              }
              default {
                return ("(" + type + ")")
              }
            }
          }
          else {
            return ("")
          }
        }
      }
    }
  </function>

  <function name="ProcessTextCommand_Eval" parameters="section, data" type="string">
  <![CDATA[
    if (not IsRegexMatch("[^\\w\\s]", section, "tp_punctuation_check")) {
      section = section + "()"
    }
    return (ToString(eval(section)))
  ]]>
  </function>
 
  <function name="ProcessTextCommand_Either" parameters="section, data" type="string">
  <![CDATA[
    command = Mid(section, 8)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@either " + command + "@@@close@@@")
    }

    text = Mid(command, colon + 1)
    colon2 = Instr(colon + 1, command, "|")
    if (colon2 = 0) {
      text2 = ""
    }
    else {
      text2 = Mid(command, colon2 + 1)
      text = Replace(text, "|" + text2, "")
    }
    condition = Left(command, colon - 1)
    if (not game.text_processor_this = null) condition = Replace(condition, "this", game.text_processor_this.name)
    result = eval(condition) 
    if (result) {
      return (ProcessTextSection(text, data))
    }
    else {
      if (text2 = "") {
        return ("")
      }
      else {
        return (ProcessTextSection(text2, data))
      }
    }
  ]]>
  </function>

  <function name="ProcessTextCommand_Here" parameters="section, data, flag" type="string">
    len = 9
    if (flag) {
      len = 6
    }
    command = Mid(section, len)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@" + section + "@@@close@@@")
    }
    else {
      text = Mid(command, colon + 1)
      condition = Left(command, colon - 1)
      if (not game.text_processor_this = null) condition = Replace(condition, "this", game.text_processor_this.name)
      object = Eval(condition)
      if (object = null) {
        return ("@@@open@@@" + section + "@@@close@@@")
      }
      if (object.parent = game.pov.parent and flag) {
        return (ProcessTextSection(text, data))
      }
      else if (not object.parent = game.pov.parent and not flag) {
        return (ProcessTextSection(text, data))
      }
      else {
        return ("")
      }
    }
  </function>

  <function name="ProcessTextCommand_If" type="string" parameters="section, data">
  <![CDATA[
    command = Mid(section, 4)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@if " + command + "@@@close@@@")
    }
    else {
      text = Mid(command, colon + 1)
      condition = Left(command, colon - 1)
      if (not game.text_processor_this = null) condition = Replace(condition, "this", game.text_processor_this.name)
      operator = Instr(condition, "<=")
      if (operator <> 0) {
        operatorlength = 2
      }
      if (operator = 0) {
        operator = Instr(condition, ">=")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<>")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, ">")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "=")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        checkfor = true
        if (StartsWith(condition, "not ")) {
          checkfor = false
          condition = Mid(condition, 5)
        }
        dot = Instr(condition, ".")
        if (dot = 0) {
          result = GetBoolean(game, condition)
        }
        else {
          objectname = Left(condition, dot - 1)
          attributename = Mid(condition, dot + 1)
          object = GetObject(objectname)
          if (object = null) {
            result = false
          }
          else {
            result = GetBoolean(object, attributename)
          }
        }
        if (result = checkfor) {
          return (ProcessTextSection(text, data))
        }
        else {
          return ("")
        }
      }
      else {
        lhs = Left(condition, operator - 1)
        rhs = Mid(condition, operator + operatorlength)
        op = Mid(condition, operator, operatorlength)
        dot = Instr(lhs, ".")
        if (dot = 0) {
          objectname = ""
          attributename = ""
          if (HasInt(game, lhs)) {
            objectname = "game"
            attributename = lhs
          }
          else {
            return ("@@@open@@@if " + command + "@@@close@@@")
          }
        }
        else {
          objectname = Left(lhs, dot - 1)
          attributename = Mid(lhs, dot + 1)
        }
        object = GetObject(objectname)
        if (object = null) {
          return ("@@@open@@@if " + command + "@@@close@@@")
        }
        else if (not HasAttribute(object, attributename)) {
          return ("@@@open@@@if " + command + "@@@close@@@")
        }
        else {
          value = GetAttribute(object, attributename)
          if (TypeOf(value) = "object") {
            value = value.name
          }
          if (op = "=") {
            if (ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<>") {
            if (not ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">") {
            if (ToDouble(ToString(value)) > ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<") {
            if (ToDouble(ToString(value)) < ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">=") {
            if (ToDouble(ToString(value)) >= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<=") {
            if (ToDouble(ToString(value)) <= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
        }
      }
    }
  ]]>
  </function>


  
  <function name="ProcessTextCommand_Format" parameters="section, data, html" type="string"><![CDATA[
    return(ProcessTextSection("<" + html + ">" + section + "</" + html + ">", data))
  ]]></function> 





  <function name="ProcessTextCommand_Colour" parameters="section, data" type="string"><![CDATA[
    ary = Split(section, ":")
    c = StringListItem(ary, 0)
    list remove(ary, c)
    s = Join (ary, ":")
    return(ProcessTextSection("<span style=\"color:" + c + ";\">" + s + "</span>", data))
  ]]></function> 



  <function name="ProcessTextCommand_Background" parameters="section, data" type="string"><![CDATA[
    ary = Split(section, ":")
    c = StringListItem(ary, 0)
    list remove(ary, c)
    s = Join (ary, ":")
    return(ProcessTextSection("<span style=\"background-color:" + c + ";\">" + s + "</span>", data))
  ]]></function> 
  

  
  <function name="ProcessTextCommand_Popup" parameters="section, data" type="string"><![CDATA[
    ary = Split(section, ":")
    s1 = StringListItem(ary, 0)
    list remove(ary, s1)
    s2 = Join (ary, ":")
    id = JSSafe(s1) + GetRandomInt(0, 999999999)
    link = game.defaultlinkforeground
    if (HasString(game, "altlinkforeground")) link = game.altlinkforeground
    s = "<span  style=\"cursor:pointer;color:" + link + ";\" onclick=\"$('#" + id + "').css('display', 'block');\">" + s1 + "</span><div id=\"" + id + "\" class=\"w3-theme-border\" style=\"position:fixed;z-index:9999;display:none;cursor:pointer;left:50px;top:40%;width:40%;background-color:" + game.defaultbackground + ";border:2px solid " + game.defaultforeground + ";color:" + link + ";border-radius:5px;padding:5px;\" onclick=\"$('#" + id + "').css('display', 'none');\"><p>"
    s = s + s2 + "</p></div>"
    return(ProcessTextSection(s, data))
  ]]></function> 
  


  <function name="ProcessTextCommand_Object" type="string" parameters="section, data">
    <![CDATA[
    objectname = Mid(section, 8)
    text = ""
    colon = Instr(objectname, ":")
    if (colon > 0) {
      text = Mid(objectname, colon + 1)
      objectname = Left(objectname, colon - 1)
    }
    if (not game.text_processor_this = null) objectname = Replace(objectname, "this", game.text_processor_this.name)
    object = GetObject(objectname)
    if (object = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      if (LengthOf(text) = 0) {
        text = SafeXML(GetDisplayAlias(object))
      }
      if (game.enablehyperlinks) {
        linkid = ProcessTextCommand_GetNextLinkId()
        colour = ""
        if (HasString(object, "linkcolour") and GetUIOption("UseGameColours") = "true") {
          colour = object.linkcolour
        }
        else {
          colour = GetLinkTextColour()
        }
        style = GetCurrentTextFormat(colour)
        return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink elementmenu\" data-elementid=\"" + object.name + "\">" + text + "</a>")
      }
      else {
        return (text)
      }
    }
    ]]>
  </function>
  
  <function name="ProcessTextCommand_GetNextLinkId" type="string">
    if (not HasInt(game, "lastlinkid")) {
      game.lastlinkid = 0
    }
    game.lastlinkid = game.lastlinkid + 1
    return ("verblink" + game.lastlinkid)
  </function>

  <function name="ProcessTextCommand_Command" type="string" parameters="command, data">
    <![CDATA[
    text = command
    colon = Instr(command, ":")
    if (colon > 0) {
      text = Mid(command, colon + 1)
      command = Left(command, colon - 1)
    }
    style = GetCurrentLinkTextFormat()
    candidates = NewObjectList()
    foreach (cmd, ScopeCommands()) {
      if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
        list add (candidates, cmd)
      }
    }
    elementid = ""
    if (ListCount(candidates) = 1) {
      cmd = ObjectListItem(candidates, 0)
      elementid = cmd.name
    }
    linkid = ProcessTextCommand_GetNextLinkId()
    dataattrs = ""
    if (game.deactivatecommandlinks) {
      dataattrs = dataattrs + "data-deactivateonclick=\"true\" "
    }
    dataattrs = dataattrs + "data-command=\"" + command + "\""
    return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink commandlink\" data-elementid=\"" + elementid + "\" " + dataattrs + ">" + ProcessTextSection(text, data) + "</a>")
    ]]>
  </function>

  <function name="ProcessTextCommand_Exit" type="string" parameters="section, data">
    <![CDATA[
    exitname = Mid(section, 6)
    exit = GetObject(exitname)
    if (exit = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@") 
    }
    else {
      verbs = GetDisplayVerbs(exit)
      alias = GetDisplayAlias(exit)
      command = LCase(StringListItem(verbs, 0)) + " " + alias
      style = GetCurrentLinkTextFormat()
      return ("<a style=\"" + style + "\" class=\"cmdlink exitlink\" data-elementid=\"" + exit.name + "\" data-command=\"" + command + "\">" + alias + "</a>")
    }
    ]]>
  </function>
  
  <function name="ProcessTextCommand_Once" type="string" parameters="section, data">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return (ProcessTextSection(Mid(section, 6), data))
    }
    else {
      return ("")
    }
  </function>

  <function name="ProcessTextCommand_NotFirst" parameters="section, data" type="string">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return ("")
    }
    else {
      return (ProcessTextSection(Mid(section, 10), data))
    }
  </function>
  
  <function name="ProcessTextCommand_Random" type="string" parameters="section, data">
    elements = Mid(section, 8)
    elementslist = Tsplit(elements)
    index = GetRandomInt(0, ListCount(elementslist) - 1)
    return (ProcessTextSection(ListItem(elementslist, index), data))
  </function>

  <function name="Tsplit" type="stringlist" parameters="splittext">
    itemlist = NewStringList()
    sections=0
    startpos=1
    for (i, 1, LengthOf(splittext)){
      if (Mid(splittext, i, 1) = "{"){
        sections = sections + 1
      }
      if (Mid(splittext, i, 1) = "}"){
        sections = sections - 1
      }
      if (Mid(splittext, i, 1) = ":" and 0 >= sections){
        item = Mid(splittext, startpos, i - startpos)
        list add(itemlist, item)
        startpos = i + 1
      }
    }
    item = Mid(splittext, startpos)
    list add(itemlist, item)
    return (itemlist)
  </function>
  
  <function name="ProcessTextCommand_RandomAlias" type="string" parameters="section, data">
    objectname = Mid(section, 8)
    if (not game.text_processor_this = null) objectname = Replace(objectname, "this", game.text_processor_this.name)
    object = GetObject(objectname)
    if (object = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      count = ListCount(object.alt)
      if (count > 0) {
        return (ListItem(object.alt, GetRandomInt(0, count - 1)))
      }
      else {
        return ("")
      }
    }
  </function>

  <function name="ProcessTextCommand_Img" type="string" parameters="section, data">
    <![CDATA[
    filename = Mid(section, 5)
    return ("<img src=\"" + GetFileURL(filename) + "\" />")
    ]]>
  </function>

  <function name="ProcessTextCommand_Counter" type="string" parameters="section, data">
    if (HasAttribute(game, section)) {
      return (ToString(GetAttribute(game, section)))
    }
    else {
      return ("0")
    }  
  </function>
  
  <function name="ProcessTextCommand_Select" parameters="section, data" type="string"><![CDATA[
    elements = Mid(section, 8)
    elementslist = Split(elements, ":")
    objectandatt = StringListItem (elementslist, 0)
    list remove (elementslist, objectandatt)
    objectandattlist = Split(objectandatt, ".")
    if (not ListCount (objectandattlist) = 2) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      objectname = StringListItem(objectandattlist, 0)
      if (not game.text_processor_this = null) objectname = Replace(objectname, "this", game.text_processor_this.name)
      object = GetObject(objectname)
      if (object = null) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else if (not HasInt (object, StringListItem(objectandattlist, 1))) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else {
        if (Instr(elements, "|") > 0) {
          elementslist = Split(Join(elementslist, ":"), "|")
        }
        index = GetInt(object, StringListItem(objectandattlist, 1))
        if ((0 > index) or (index >= Listcount(elementslist))) {
          return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
        }
        else {
          return (ProcessTextSection(ListItem(elementslist, index), data))
        }
      }
    }
  ]]></function>
  
  <function name="SetFramePicture" parameters="filename">
    <![CDATA[
    request (SetPanelContents, "<img src=\"" + GetFileURL(filename) + "\" onload=\"setPanelHeight()\"/>")
    game.panelcontents = filename
    ]]>
  </function>

  <function name="ClearFramePicture">
    request (SetPanelContents, "")
    game.panelcontents = null
  </function>

  <function name="ClearScreen">
    request (ClearScreen, "")
  </function>

  <function name="SetForegroundColour" parameters="colour">
    request (Foreground, colour)
    game.defaultforeground = colour
  </function>

  <function name="SetBackgroundColour" parameters="colour">
    request (Background, colour)
    game.defaultbackground = colour
  </function>

  <function name="SetLinkForegroundColour" parameters="colour">
    request (LinkForeground, colour)
    game.defaultlinkforeground = colour
  </function>

  <function name="SetFontName" parameters="font">
    game.defaultfont = font
    game.defaultwebfont = ""
  </function>

  <function name="SetWebFontName" parameters="font">
    AddExternalStylesheet ("https://fonts.googleapis.com/css?family=" + Replace(font, " ", "+"))
    game.defaultwebfont = font
  </function>

  <function name="AddExternalStylesheet" parameters="stylesheet">
    if (game.externalstylesheets = null) {
      game.externalstylesheets = NewStringList()
    }
    if (not ListContains(game.externalstylesheets, stylesheet)) {
      list add (game.externalstylesheets, stylesheet)
      JS.addExternalStylesheet(stylesheet)
    }
  </function>

  <function name="SetFontSize" parameters="size">
    game.defaultfontsize = size
  </function>

  <function name="PrintCentered" parameters="text">
    <![CDATA[
    SetAlignment("center")
    msg (text)
    SetAlignment("left")
    ]]>
  </function>

  <function name="ShowYouTube" parameters="id">
    JS.AddYouTube(id)
  </function>

  <function name="ShowVimeo" parameters="id">
    JS.AddVimeo(id)
  </function>

  <function name="WaitForKeyPress">
    request (Wait, "")
  </function>

  <function name="DisplayHttpLink" parameters="text, url, https">
    <![CDATA[
    pos = Instr(url, "://")
    if (pos > 0) {
      url = Mid(url, pos + 3) 
    }
    if (https) {
      url = "https://" + url
    }
    else {
      url = "http://" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
    ]]>
  </function>

  <function name="DisplayMailtoLink" parameters="text, url">
    <![CDATA[
    if (Instr(url, "mailto:") = 0) {
      url = "mailto:" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
    ]]>
  </function>

  <function name="CommandLink" type="string" parameters="cmd, text">
    <![CDATA[
    return ("{command:" + cmd + ":" + text + "}")
    ]]>
  </function>
  
  <function name="Log" parameters="text">
    request (Log, text)
  </function>

  <function name="SetBackgroundImage" parameters="filename">
    JS.SetBackgroundImage(GetFileURL(filename))
    game.backgroundimage = filename
  </function>

  <function name="SetBackgroundOpacity" parameters="opacity">
    JS.SetBackgroundOpacity(opacity)
    game.backgroundopacity = opacity
    game.setbackgroundopacity = true
  </function>

  <function name="DisplayList" parameters="list, numbers">
    <![CDATA[
    if (numbers) {
      result = "<ol>"
    }
    else {
      result = "<ul>"
    }
    foreach (item, list) {
      result = result + "<li>" + item + "</li>"
    }
    if (numbers) {
      result = result + "</ol>"
    }
    else {
      result = result + "</ul>"
    }
    msg (result)
    ]]>
  </function>

  <function name="SetAlignment" parameters="align">
    JS.createNewDiv(align)
  </function>
  
  <function name="GetCurrentFontFamily" type="string">
    if (game.defaultwebfont = null) {
      return (game.defaultfont)
    }
    else {
      if (game.defaultwebfont = "") {
        return (game.defaultfont)
      }
      else {
        return ("'" + game.defaultwebfont + "', " + game.defaultfont)
      }
    }
  </function>
  
  <function name="FormatList" parameters="list, joiner, lastjoiner, nothing" type="string"><![CDATA[
    if (ListCount (list) = 0) {
      return (nothing)
    }
    else {
      result = ""
      count = 0
      listLength = ListCount(list)
      foreach (item, list) {
        if (TypeOf(item) = "object") {
          result = result + GetDisplayName(item)
        }
        else {
          result = result + item
        }
        count = count + 1
        if (count = listLength - 1) {
          if (not IsRegexMatch("^\\W", lastjoiner)) result = result + " "
          result = result + lastjoiner + " "
        }
        else if (count < listLength) {
          result = result + joiner + " "
        }
      }
      return (Trim (result))
    }
  ]]></function>

  <function name="Spaces" parameters="number" type="string"><![CDATA[
    game.command_successful = True
    text = ""
    for (x, 1, number) {
      text = text+ "&nbsp;"
    }
    return (text)
  ]]></function>



  

  
  <function name="ToRoman" parameters="n" type="string">
    if (not TypeOf(n) = "int") error ("ToRoman can only handle ints")

    arabic = Split("1000;900;500;400;100;90;50;40;10;9;5;4;1", ";")
    roman = Split("M;CM;D;CD;C;XC;L;XL;X;IX;V;IV;I", ";")

    result = ""
    for(i, 0, 12) {
      a = ToInt(StringListItem(arabic, i))
      r = StringListItem(roman, i)
      while (n >= a) {
        result = result + r
        n = n - a
      }
    }
    return (result)
  </function>
</library>